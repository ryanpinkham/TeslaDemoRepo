/**
 * Tesla Model S API 
 * A demo API to access and control the Tesla Model S
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.TeslaModelSApi_) {
      root.TeslaModelSApi_ = {};
    }
    root.TeslaModelSApi_.InlineResponse2003 = factory(root.TeslaModelSApi_.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The InlineResponse2003 model module.
   * @module model/InlineResponse2003
   * @version 0.0.1
   */

  /**
   * Constructs a new <code>InlineResponse2003</code>.
   * @alias module:model/InlineResponse2003
   * @class
   */
  var exports = function() {
    var _this = this;









  };

  /**
   * Constructs a <code>InlineResponse2003</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/InlineResponse2003} obj Optional instance to populate.
   * @return {module:model/InlineResponse2003} The populated <code>InlineResponse2003</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('inside_temp')) {
        obj['inside_temp'] = ApiClient.convertToType(data['inside_temp'], 'Number');
      }
      if (data.hasOwnProperty('outside_temp')) {
        obj['outside_temp'] = ApiClient.convertToType(data['outside_temp'], 'Number');
      }
      if (data.hasOwnProperty('driver_temp_setting')) {
        obj['driver_temp_setting'] = ApiClient.convertToType(data['driver_temp_setting'], 'Number');
      }
      if (data.hasOwnProperty('passenger_temp_setting')) {
        obj['passenger_temp_setting'] = ApiClient.convertToType(data['passenger_temp_setting'], 'Number');
      }
      if (data.hasOwnProperty('is_auto_conditioning_on')) {
        obj['is_auto_conditioning_on'] = ApiClient.convertToType(data['is_auto_conditioning_on'], 'Boolean');
      }
      if (data.hasOwnProperty('is_front_defroster_on')) {
        obj['is_front_defroster_on'] = ApiClient.convertToType(data['is_front_defroster_on'], 'Boolean');
      }
      if (data.hasOwnProperty('is_rear_defroster_on')) {
        obj['is_rear_defroster_on'] = ApiClient.convertToType(data['is_rear_defroster_on'], 'Boolean');
      }
      if (data.hasOwnProperty('fan_status')) {
        obj['fan_status'] = ApiClient.convertToType(data['fan_status'], 'Number');
      }
    }
    return obj;
  }

  /**
   * degC inside car
   * @member {Number} inside_temp
   */
  exports.prototype['inside_temp'] = undefined;
  /**
   * degC outside car or null
   * @member {Number} outside_temp
   */
  exports.prototype['outside_temp'] = undefined;
  /**
   * degC of driver temperature setpoint
   * @member {Number} driver_temp_setting
   */
  exports.prototype['driver_temp_setting'] = undefined;
  /**
   * degC of passenger temperature setpoint
   * @member {Number} passenger_temp_setting
   */
  exports.prototype['passenger_temp_setting'] = undefined;
  /**
   * @member {Boolean} is_auto_conditioning_on
   */
  exports.prototype['is_auto_conditioning_on'] = undefined;
  /**
   * @member {Boolean} is_front_defroster_on
   */
  exports.prototype['is_front_defroster_on'] = undefined;
  /**
   * @member {Boolean} is_rear_defroster_on
   */
  exports.prototype['is_rear_defroster_on'] = undefined;
  /**
   * fan speed 0-6 or null
   * @member {Number} fan_status
   */
  exports.prototype['fan_status'] = undefined;



  return exports;
}));


