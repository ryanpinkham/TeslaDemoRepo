/**
 * Tesla Model S API 
 * A demo API to access and control the Tesla Model S
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/InlineResponse200', 'model/InlineResponse2001', 'model/InlineResponse2002', 'model/InlineResponse2003'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/InlineResponse200'), require('../model/InlineResponse2001'), require('../model/InlineResponse2002'), require('../model/InlineResponse2003'));
  } else {
    // Browser globals (root is window)
    if (!root.TeslaModelSApi_) {
      root.TeslaModelSApi_ = {};
    }
    root.TeslaModelSApi_.DefaultApi = factory(root.TeslaModelSApi_.ApiClient, root.TeslaModelSApi_.InlineResponse200, root.TeslaModelSApi_.InlineResponse2001, root.TeslaModelSApi_.InlineResponse2002, root.TeslaModelSApi_.InlineResponse2003);
  }
}(this, function(ApiClient, InlineResponse200, InlineResponse2001, InlineResponse2002, InlineResponse2003) {
  'use strict';

  /**
   * Default service.
   * @module api/DefaultApi
   * @version 0.0.1
   */

  /**
   * Constructs a new DefaultApi. 
   * @alias module:api/DefaultApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the climateState operation.
     * @callback module:api/DefaultApi~climateStateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2003} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the current temperature and climate control state.
     * @param {String} id The ID number of the car
     * @param {module:api/DefaultApi~climateStateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2003}
     */
    this.climateState = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling climateState");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = InlineResponse2003;

      return this.apiClient.callApi(
        '/vehicles/{id}/data_request/climate_state', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the driveState operation.
     * @callback module:api/DefaultApi~driveStateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2001} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the driving and position state of the vehicle.
     * @param {String} id The ID number of the car
     * @param {module:api/DefaultApi~driveStateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2001}
     */
    this.driveState = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling driveState");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/vehicles/{id}/data_request/drive_state', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setTemps operation.
     * @callback module:api/DefaultApi~setTempsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the temperature target for the HVAC system.
     * @param {String} id The ID number of the car
     * @param {String} driverTemp The desired temperature on the driver&#39;s side in celcius.
     * @param {String} passengerTemp The desired temperature on the passenger&#39;s side in celcius.
     * @param {module:api/DefaultApi~setTempsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2002}
     */
    this.setTemps = function(id, driverTemp, passengerTemp, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling setTemps");
      }

      // verify the required parameter 'driverTemp' is set
      if (driverTemp == undefined || driverTemp == null) {
        throw new Error("Missing the required parameter 'driverTemp' when calling setTemps");
      }

      // verify the required parameter 'passengerTemp' is set
      if (passengerTemp == undefined || passengerTemp == null) {
        throw new Error("Missing the required parameter 'passengerTemp' when calling setTemps");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'driver_temp': driverTemp,
        'passenger_temp': passengerTemp
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/vehicles/{id}/command/set_temps', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the vehicleGet operation.
     * @callback module:api/DefaultApi~vehicleGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Details about owned vehicle
     * @param {module:api/DefaultApi~vehicleGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.vehicleGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/vehicle', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
